/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IBridge {
  export type UserStruct = {
    _address: PromiseOrValue<string>;
    chainId: PromiseOrValue<BigNumberish>;
  };

  export type UserStructOutput = [string, BigNumber] & {
    _address: string;
    chainId: BigNumber;
  };

  export type OriginalTokenStruct = {
    tokenAddress: PromiseOrValue<string>;
    originChainId: PromiseOrValue<BigNumberish>;
  };

  export type OriginalTokenStructOutput = [string, BigNumber] & {
    tokenAddress: string;
    originChainId: BigNumber;
  };

  export type SourceTxDataStruct = {
    transactionHash: PromiseOrValue<BytesLike>;
    blockHash: PromiseOrValue<BytesLike>;
    logIndex: PromiseOrValue<BigNumberish>;
  };

  export type SourceTxDataStructOutput = [string, string, BigNumber] & {
    transactionHash: string;
    blockHash: string;
    logIndex: BigNumber;
  };

  export type ClaimDataStruct = {
    from: IBridge.UserStruct;
    to: IBridge.UserStruct;
    value: PromiseOrValue<BigNumberish>;
    token: IBridge.OriginalTokenStruct;
    depositTxSourceToken: PromiseOrValue<string>;
    targetTokenAddress: PromiseOrValue<string>;
    targetTokenName: PromiseOrValue<string>;
    targetTokenSymbol: PromiseOrValue<string>;
    deadline: PromiseOrValue<BigNumberish>;
    sourceTxData: IBridge.SourceTxDataStruct;
  };

  export type ClaimDataStructOutput = [
    IBridge.UserStructOutput,
    IBridge.UserStructOutput,
    BigNumber,
    IBridge.OriginalTokenStructOutput,
    string,
    string,
    string,
    string,
    BigNumber,
    IBridge.SourceTxDataStructOutput
  ] & {
    from: IBridge.UserStructOutput;
    to: IBridge.UserStructOutput;
    value: BigNumber;
    token: IBridge.OriginalTokenStructOutput;
    depositTxSourceToken: string;
    targetTokenAddress: string;
    targetTokenName: string;
    targetTokenSymbol: string;
    deadline: BigNumber;
    sourceTxData: IBridge.SourceTxDataStructOutput;
  };

  export type SignatureStruct = {
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type SignatureStructOutput = [number, string, string] & {
    v: number;
    r: string;
    s: string;
  };

  export type DepositDataStruct = {
    from: IBridge.UserStruct;
    to: IBridge.UserStruct;
    spender: PromiseOrValue<string>;
    token: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    approveTokenTransferSig: IBridge.SignatureStruct;
  };

  export type DepositDataStructOutput = [
    IBridge.UserStructOutput,
    IBridge.UserStructOutput,
    string,
    string,
    BigNumber,
    BigNumber,
    IBridge.SignatureStructOutput
  ] & {
    from: IBridge.UserStructOutput;
    to: IBridge.UserStructOutput;
    spender: string;
    token: string;
    value: BigNumber;
    deadline: BigNumber;
    approveTokenTransferSig: IBridge.SignatureStructOutput;
  };
}

export interface IBridgeInterface extends utils.Interface {
  functions: {
    "claim(((address,uint256),(address,uint256),uint256,(address,uint256),address,address,string,string,uint256,(bytes32,bytes32,uint256)),(uint8,bytes32,bytes32))": FunctionFragment;
    "deposit(((address,uint256),(address,uint256),address,address,uint256,uint256,(uint8,bytes32,bytes32)))": FunctionFragment;
    "depositWithPermit(((address,uint256),(address,uint256),address,address,uint256,uint256,(uint8,bytes32,bytes32)))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "claim" | "deposit" | "depositWithPermit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [IBridge.ClaimDataStruct, IBridge.SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [IBridge.DepositDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithPermit",
    values: [IBridge.DepositDataStruct]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositWithPermit",
    data: BytesLike
  ): Result;

  events: {
    "BurnWrappedToken(address,uint256,address,address,uint256,uint256,address,uint256)": EventFragment;
    "LockOriginalToken(address,uint256,address,address,uint256,uint256)": EventFragment;
    "MintWrappedToken(address,uint256,address,address,uint256,uint256,address,uint256,bytes32,bytes32,uint256)": EventFragment;
    "ReleaseOriginalToken(address,uint256,address,address,uint256,uint256,address,bytes32,bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BurnWrappedToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockOriginalToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintWrappedToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReleaseOriginalToken"): EventFragment;
}

export interface BurnWrappedTokenEventObject {
  burnedWrappedTokenAddress: string;
  value: BigNumber;
  sender: string;
  recepient: string;
  sourceChainId: BigNumber;
  toChainId: BigNumber;
  originalTokenAddress: string;
  originalTokenChainId: BigNumber;
}
export type BurnWrappedTokenEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, BigNumber, string, BigNumber],
  BurnWrappedTokenEventObject
>;

export type BurnWrappedTokenEventFilter =
  TypedEventFilter<BurnWrappedTokenEvent>;

export interface LockOriginalTokenEventObject {
  lockedTokenAddress: string;
  value: BigNumber;
  sender: string;
  recepient: string;
  sourceChainId: BigNumber;
  toChainId: BigNumber;
}
export type LockOriginalTokenEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, BigNumber],
  LockOriginalTokenEventObject
>;

export type LockOriginalTokenEventFilter =
  TypedEventFilter<LockOriginalTokenEvent>;

export interface MintWrappedTokenEventObject {
  mintedTokenAddress: string;
  value: BigNumber;
  sender: string;
  recepient: string;
  sourceChainId: BigNumber;
  toChainId: BigNumber;
  originalTokenAddress: string;
  originalChainId: BigNumber;
  transactionHash: string;
  blockHash: string;
  logIndex: BigNumber;
}
export type MintWrappedTokenEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber
  ],
  MintWrappedTokenEventObject
>;

export type MintWrappedTokenEventFilter =
  TypedEventFilter<MintWrappedTokenEvent>;

export interface ReleaseOriginalTokenEventObject {
  releasedTokenAddress: string;
  value: BigNumber;
  sender: string;
  recepient: string;
  sourceChainId: BigNumber;
  toChainId: BigNumber;
  sourceWrappedTokenAddress: string;
  transactionHash: string;
  blockHash: string;
  logIndex: BigNumber;
}
export type ReleaseOriginalTokenEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    BigNumber
  ],
  ReleaseOriginalTokenEventObject
>;

export type ReleaseOriginalTokenEventFilter =
  TypedEventFilter<ReleaseOriginalTokenEvent>;

export interface IBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      _claimData: IBridge.ClaimDataStruct,
      claimSig: IBridge.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _depositData: IBridge.DepositDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositWithPermit(
      _depositData: IBridge.DepositDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claim(
    _claimData: IBridge.ClaimDataStruct,
    claimSig: IBridge.SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _depositData: IBridge.DepositDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositWithPermit(
    _depositData: IBridge.DepositDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(
      _claimData: IBridge.ClaimDataStruct,
      claimSig: IBridge.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _depositData: IBridge.DepositDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    depositWithPermit(
      _depositData: IBridge.DepositDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BurnWrappedToken(address,uint256,address,address,uint256,uint256,address,uint256)"(
      burnedWrappedTokenAddress?: null,
      value?: null,
      sender?: PromiseOrValue<string> | null,
      recepient?: PromiseOrValue<string> | null,
      sourceChainId?: null,
      toChainId?: null,
      originalTokenAddress?: PromiseOrValue<string> | null,
      originalTokenChainId?: null
    ): BurnWrappedTokenEventFilter;
    BurnWrappedToken(
      burnedWrappedTokenAddress?: null,
      value?: null,
      sender?: PromiseOrValue<string> | null,
      recepient?: PromiseOrValue<string> | null,
      sourceChainId?: null,
      toChainId?: null,
      originalTokenAddress?: PromiseOrValue<string> | null,
      originalTokenChainId?: null
    ): BurnWrappedTokenEventFilter;

    "LockOriginalToken(address,uint256,address,address,uint256,uint256)"(
      lockedTokenAddress?: PromiseOrValue<string> | null,
      value?: null,
      sender?: PromiseOrValue<string> | null,
      recepient?: PromiseOrValue<string> | null,
      sourceChainId?: null,
      toChainId?: null
    ): LockOriginalTokenEventFilter;
    LockOriginalToken(
      lockedTokenAddress?: PromiseOrValue<string> | null,
      value?: null,
      sender?: PromiseOrValue<string> | null,
      recepient?: PromiseOrValue<string> | null,
      sourceChainId?: null,
      toChainId?: null
    ): LockOriginalTokenEventFilter;

    "MintWrappedToken(address,uint256,address,address,uint256,uint256,address,uint256,bytes32,bytes32,uint256)"(
      mintedTokenAddress?: null,
      value?: null,
      sender?: null,
      recepient?: PromiseOrValue<string> | null,
      sourceChainId?: null,
      toChainId?: null,
      originalTokenAddress?: PromiseOrValue<string> | null,
      originalChainId?: null,
      transactionHash?: PromiseOrValue<BytesLike> | null,
      blockHash?: null,
      logIndex?: null
    ): MintWrappedTokenEventFilter;
    MintWrappedToken(
      mintedTokenAddress?: null,
      value?: null,
      sender?: null,
      recepient?: PromiseOrValue<string> | null,
      sourceChainId?: null,
      toChainId?: null,
      originalTokenAddress?: PromiseOrValue<string> | null,
      originalChainId?: null,
      transactionHash?: PromiseOrValue<BytesLike> | null,
      blockHash?: null,
      logIndex?: null
    ): MintWrappedTokenEventFilter;

    "ReleaseOriginalToken(address,uint256,address,address,uint256,uint256,address,bytes32,bytes32,uint256)"(
      releasedTokenAddress?: PromiseOrValue<string> | null,
      value?: null,
      sender?: null,
      recepient?: PromiseOrValue<string> | null,
      sourceChainId?: null,
      toChainId?: null,
      sourceWrappedTokenAddress?: null,
      transactionHash?: PromiseOrValue<BytesLike> | null,
      blockHash?: null,
      logIndex?: null
    ): ReleaseOriginalTokenEventFilter;
    ReleaseOriginalToken(
      releasedTokenAddress?: PromiseOrValue<string> | null,
      value?: null,
      sender?: null,
      recepient?: PromiseOrValue<string> | null,
      sourceChainId?: null,
      toChainId?: null,
      sourceWrappedTokenAddress?: null,
      transactionHash?: PromiseOrValue<BytesLike> | null,
      blockHash?: null,
      logIndex?: null
    ): ReleaseOriginalTokenEventFilter;
  };

  estimateGas: {
    claim(
      _claimData: IBridge.ClaimDataStruct,
      claimSig: IBridge.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _depositData: IBridge.DepositDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositWithPermit(
      _depositData: IBridge.DepositDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      _claimData: IBridge.ClaimDataStruct,
      claimSig: IBridge.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _depositData: IBridge.DepositDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositWithPermit(
      _depositData: IBridge.DepositDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
